版本控制
	版本控制是一种记录一个或若干文件内容的变化，以便将来查阅特定版本修订情况的系统
	作用
		备份文件、记录历史、时光机、多端共享（百度云）、团队协作
	原始版本控制系统
	本地版本控制系统（文件系统、RCS）
	集中化版本控制系统（SVN、CVS）
		优点：客户端盛磁盘空间、权限控制方便
		缺点：安全性低
	分布式版本控制系统（Git、Mercurial）
		优点：弥补了集中化版本控制系统的缺点
		缺点：增加了本地磁盘空间的占用、代码保密性差，不方便做权限控制

Git基本操作
	创建项目
	克隆项目：把项目从server克隆到本地
		$ git clone https://gitee.com/ch-ambition/Python-01.git
		Cloning into 'Python-01'...
	进入仓库（所有仓库的操作都需要先进入仓库）
		陈慧@LAPTOP-1U92OFM7 MINGW64 ~/Python-01 (master)
		$ cd Python-01
	在本地拉取服务器最新信息
		$ git pull
		或
		$ git fetch
		$ git merge
	本地修改同步到网页
		本地创建文件
			$ vim c.txt
		标记文件为待提交文件
			$ git add c.txt
		将文件提交到本地
			配置用户信息
				$ git config --global user.email "1282518349@qq.com"
				$ git config --global user.name "旋风小甜甜"
			$ git commit
			提交时一定要写备注信息
		提交到远程仓库
			$ git push
	
	Git中文件的三种状态
		已修改(modified)
		已暂存(staged)
		已提交(committed)
	
	删除文件并同步到远程仓库
		$ git rm a.txt
		$ git commit -m "delete"
		$ git push
		
		通配符
			git add *.txt（把所有扩展名为txt的都add）
			gia add .    （标记所有有变化的文件为暂存态）
	
	拉取远程仓库信息
		添加远程仓库
			$ git remote add homework https://gitee.com/it_technology/python_201901_fulltime.git
		查看所有远程仓库
			$ git remote -v
			homework        https://gitee.com/it_technology/python_201901_fulltime.git (fetch)
			homework        https://gitee.com/it_technology/python_201901_fulltime.git (push)
			origin  https://gitee.com/ch-ambition/python_201901_fulltime.git (fetch)
			origin  https://gitee.com/ch-ambition/python_201901_fulltime.git (push)
		从指定远程仓库拉取信息
			$ git pull homework master
		删除仓库
			git remote remove 仓库名
			
			
	master  项目初始化的默认分支 
		创建分支
			git branch  新分支名  原分支名
		查看分支，当前分支前标*
			git branch
		查看历史
			git log
		切换分支
			git checkout 分支名
		创建并切换分支
			git checkout -b 分支名
		合并分支
			git merge 分支名
		删除未合并的分支
			git branch -D 分支名
		删除合并了的分支
			git branch -d 分支名
		在push代码时，出现“git master branch has no upstream branch”
		问题的原因是没有将本地的分支与远程仓库的分支进行关联
		解决：git push --set-upstream origin dev（分支名）
		不能在要删除的分支下删除此分支

	
	提交作业
		从IT技术 / python201901全日上拉取作业内容
		进入当天的作业文件夹
			$ cd 20190227-day2-git及python起步/
		创建以自己名字命名的文件夹
			$ mkdir 陈慧
		进入自己的文件夹创建一个作业文档并编辑作业
			$ cd 陈慧/
			$ vim text.txt
		退出到作业文件夹
			$ cd ..
		上传陈慧文件夹
			$ git add 陈慧/
			$ git commit
			$ git push